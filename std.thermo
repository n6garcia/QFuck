# Setup Memory: Counter Mem Start/Upbit(flag)/DownCounter Mem Start/Downbit(flag)/Unbit
# 0+__ *0-__ ** | 000..
{thermbits}.>+>++>>->-->.
# load/unload unbit
{lunb}.[<++>].
{ulunb}.[<+>].
# 0123 mean if slot is 0/0 1/+ 2/- or 3/* then break loop
{skp1bit}.>.
{skpcmem}.[>3].
{skpdcmem}.[>3]>.
{slwgmjmp}.* {skpcmem} {skpdcmem} {skp1bit}.
# Add to UpCounter | * takes you to 0 | / adds 0 after cursor
{add0b4}.</>>.
{add+b4}.</>+>.
{add-b4}.</>->.
{add*b4}.</>++>.
{cAdd}.* {skpcmem} {add+b4} {skpdcmem} {skp1bit}.
{dcAddSub}.* {skpcmem} {skpdcmem} {add-b4} {skp1bit}.
# Setup Memory | Graph Memory {A graph is a complex data type} |000...
{stpgm}.>++++[-<+++++++++++>]   # Set up initial graph data (3 nodes)
>++++++++[-<++++++++>]  # Another graph data (link to node)
>++++++++[-<++++++++>].  # More initial data (link to node)
{opdfvs}.<<<[                    # Start processing
    >-                  # Process node 1 (if connected to any other node)
    [                   # Loop if current node has connections
        -               # Disconnect this node (as part of our processing)
        >-<             # Move to neighbor, disconnect neighbor
    ]
    >                   # Move to the next node
    -                   # Process node 2 similarly
    [                   # Loop if node has connections
        -               # Disconnect this node
        >-<             # Move to neighbor, disconnect neighbor
    ]
    >                   # Move to node 3
    -                   # Process node 3 similarly
    [                   # Loop if node has connections
        -               # Disconnect this node
        >-<             # Move to neighbor, disconnect neighbor
    ]
].
{stp}.{thermbits}{stpgm}.
# GOAL: Never encapsulate a function call {stp{stp}} is illegal.
{main}.{stp}{opdfvs}.









